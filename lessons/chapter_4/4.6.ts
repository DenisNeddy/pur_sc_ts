// Types или Interfaces

// Всегда стараться писать интефейс целиком без доопределение
// Единственное где это полезно(доопределение интерфейса) это работа с библиотеками

interface User_46 {
    name: string
}

interface User_46 {
    age: number
}

const user_46: User_46 = {
    name: 'Михаил',
    age: 56
}


// type нк может доопределять, его нужно сразу определять

type User_46_1 = {
    name: string
}

// interface User_46 {
//     age: number
// }

// const user_46_1: User_46_1 = {
//     name: 'Михаил',
//     age: 56
// }

type ID = string | number; // Type может быть примитивом, Интерфейс нет(только свойства интерфейса могут быть простые типы)

// Заключение 
// type - для примитивов
// interface - для объектов

//-----------------------------------------------------------

// Интерфейсы vs Типы в TypeScript
// Основные различия и использование
// Интерфейсы:

// Преимущества: позволяют дополнять существующие интерфейсы новыми свойствами через повторное объявление.
// Недостатки: может вводить в заблуждение или затруднять понимание кода при ревью, если интерфейс доопределяется в разных местах.
// Рекомендации использования:
// Используйте для объектов и классов.
// Избегайте доопределения собственных интерфейсов; используйте объединение определений (merge definitions) только в случаях, когда вы работаете с библиотечными типами и необходимо их расширить.
// Типы (Type Aliases):

// Преимущества: позволяют создавать объединения (union types) и пересечения (intersection types) типов, работать с примитивными типами.
// Ограничения: не позволяют дополнять или изменять уже объявленный тип, выдают ошибку при попытке повторного объявления.
// Рекомендации использования:
// Используйте для случаев, когда требуется работа с примитивными типами, объединениями или пересечениями типов.
// Предпочитайте интерфейсы для объектов и классов для обеспечения большей гибкости и читаемости кода.
// Заключение и общие рекомендации
// Используйте интерфейсы для описания объектов и классов за их способность к расширению и легкости внесения изменений.
// Применяйте типы (Type Aliases) для работы с примитивными типами, а также создания объединений и пересечений типов, где интерфейсы не подходят.
// Ваш выбор между интерфейсами и типами зависит от конкретных задач и требований к коду, а также от представлений о читаемости и удобстве поддержки кода в вашей команде.