"use strict";
// Void
//------------------------------------------------------------
// Основные моменты:
// Что такое void:
// Void — это специфический тип в TypeScript, указывающий, что функция ничего не возвращает.
// Важно не путать void и undefined, несмотря на их схожесть.
// Пример использования:
// При создании логирующей функции тип возвращаемого значения определяется как void.
// Отличие void от undefined:
// В TypeScript, в отличие от JavaScript, тип void используется для функций, которые выполняются, но не возвращают значение.
// Пример: при попытке присвоить результат функции переменной, если функция возвращает void, с переменной нельзя будет провести никаких операций.
// Примеры применения void в функциях:
// Обсуждается случай условной функции, возвращающей либо число, либо ничего, при этом тип возвращаемого значения может быть указан как number | void.
// Определение функций с типом void:
// Можно определить тип функции, которая должна возвращать void, и использовать его для создания конкретных функций.
// Игнорирование возвращаемого значения:
// При возвращении каких-либо значений из функции, определённой как возвращающей void, TypeScript будет игнорировать эти значения.
// Практическое применение void:
// Void может быть использован, например, при работе с массивами и методом forEach, где функции, передаваемые в forEach, не должны возвращать значение.
// Совместимость void с другими операциями:
// Использование типа void обеспечивает совместимость с паттернами, где важен сам факт выполнения операции, а не её результат.
//------------------------------------------------------------
function logId_49(id) {
    console.log(id);
}
const a = logId(1);
function multiply_49(f, s) {
    if (!s) {
        return f * f;
    }
    return f * s;
}
const f1_49 = () => {
};
const f2_49 = () => {
    return true;
};
const b = f2_49();
const skills = ['Dev', 'DevOps'];
const user_49 = {
    s: ['s']
};
skills.forEach((skill) => user_49.s.push(skill));
