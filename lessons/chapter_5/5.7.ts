// Implements

//--------------------------------------------------

// Введение
// Имплементация интерфейсов позволяет абстрагироваться от реализации, согласовывая основные методы и свойства классов.
// Пример использования: Logger
// Логирование может быть разным (в базу, консоль, файл), но важно наличие универсальных методов (log, error).
// Создание интерфейса ILoger предопределяет наличие этих методов в любой реализации логера.
// Реализация интерфейса
// Имплементация (implements) обязывает класс выполнять контракт интерфейса, т.е. реализовывать все его методы.
// Пример: Создание класса Logger, имплементирующего ILoger.
// IDE (например, VS Code) может помочь в автоматической реализации методов интерфейса.
// Поддержка асинхронных методов в имплементации также возможна.
// Частичная имплементация
// Возможность реализовать не весь интерфейс, а только часть требуемых методов/свойств.
// Пример: IPayable интерфейс с методом Pay и необязательным свойством price.
// Множественная имплементация
// Класс может имплементировать несколько интерфейсов, обогащая свой функционал свойствами и методами каждого из них.
// Пример: класс User может имплементировать интерфейсы IPayable (поддержка оплаты) и IDeletable (возможность удаления).

//--------------------------------------------------

interface ILogger_57 {
    log(...args: any[]): void;
    error(...args: any[]): void;
}

class Logger_57 implements ILogger_57 {
    log(...args: any[]): void {
        console.log(...args);
    }
    error(...args: any[]): void {
        console.log(...args);
    }
}

interface IPayable_57 {
    pay(paymentId: number): void;
    price?: number;
}

interface IDeletable_57 {
    delete(): void;
}

class User_57 implements IPayable_57, IDeletable_57 {
    delete(): void {
        throw new Error("Method not implemented.");
    }
    
    pay(paymentId: number | string): void {
        throw new Error("Method not implemented.");
    }
    price?: number | undefined;
}