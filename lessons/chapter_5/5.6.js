"use strict";
// Getter и Setter
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
//-----------------------------------------------------
// Что такое геттеры и сеттеры?
// Геттеры (getters) и сеттеры (setters) позволяют контролировать доступ к свойствам объекта. Геттер получает значение свойства, а сеттер устанавливает его.
// Зачем нужны геттеры и сеттеры?
// Инкапсуляция: позволяют скрыть детали реализации и внутреннее состояние объекта, предоставляя публичный интерфейс для работы.
// Контроль над доступом: можно добавить дополнительную логику при установке или получении значения свойства (например, проверку или изменение данных).
// Пример использования
// Допустим, у нас есть класс User с свойствами login и password. Хотим, чтобы login всегда начинался с префикса "user.".
// Неправильное решение
// Модифицировать свойство вне класса User.
// Правильное решение
// Сеттер setLogin: позволяет нам добавлять префикс к логину при его установке.
// Геттер getLogin: позволяет изменять вывод свойства. Например, вместо реального логина возвращать фиксированное значение.
// Особенности
// Наименование: свойства для геттеров и сеттеров обычно начинают с _, чтобы отличать их от обычных свойств.
// Типизация: тип значения, которое принимает сеттер, автоматически определяется типом, возвращаемым геттером. Можно использовать объединение типов (union types) для гибкости.
// Read-Only: если у класса только геттер, свойство считается доступным только для чтения.
// Асинхронность: геттеры и сеттеры не могут быть асинхронными.
// Рекомендации по использованию
// Для асинхронных операций (например, шифрование пароля) используйте методы класса, так как геттеры/сеттеры не поддерживают асинхронность.
// Для добавления сайд-эффектов: например, записи времени создания объекта при установлении значения свойства.
//-----------------------------------------------------
class User_56 {
    set login(l) {
        this._login = 'user-' + l;
    }
    get login() {
        return this._login;
    }
    getPassword(p) {
        return __awaiter(this, void 0, void 0, function* () {
            // геттер и сеттер не могут быть асинхронные, 
            // проверка пароля делается только в методах
        });
    }
}
const user_56 = new User_56();
user_56.login = 'myLogin';
console.log(user_56.login);
