// Getter и Setter


//-----------------------------------------------------

// Что такое геттеры и сеттеры?
// Геттеры (getters) и сеттеры (setters) позволяют контролировать доступ к свойствам объекта. Геттер получает значение свойства, а сеттер устанавливает его.

// Зачем нужны геттеры и сеттеры?
// Инкапсуляция: позволяют скрыть детали реализации и внутреннее состояние объекта, предоставляя публичный интерфейс для работы.
// Контроль над доступом: можно добавить дополнительную логику при установке или получении значения свойства (например, проверку или изменение данных).
// Пример использования
// Допустим, у нас есть класс User с свойствами login и password. Хотим, чтобы login всегда начинался с префикса "user.".

// Неправильное решение
// Модифицировать свойство вне класса User.

// Правильное решение
// Сеттер setLogin: позволяет нам добавлять префикс к логину при его установке.
// Геттер getLogin: позволяет изменять вывод свойства. Например, вместо реального логина возвращать фиксированное значение.
// Особенности
// Наименование: свойства для геттеров и сеттеров обычно начинают с _, чтобы отличать их от обычных свойств.
// Типизация: тип значения, которое принимает сеттер, автоматически определяется типом, возвращаемым геттером. Можно использовать объединение типов (union types) для гибкости.
// Read-Only: если у класса только геттер, свойство считается доступным только для чтения.
// Асинхронность: геттеры и сеттеры не могут быть асинхронными.
// Рекомендации по использованию
// Для асинхронных операций (например, шифрование пароля) используйте методы класса, так как геттеры/сеттеры не поддерживают асинхронность.
// Для добавления сайд-эффектов: например, записи времени создания объекта при установлении значения свойства.

//-----------------------------------------------------


class User_56 {
    _login: string;
    password: string;

    set login(l: string | number) {
        this._login = 'user-' + l;
    }
    get login() {
        return this._login;
    }

    async getPassword(p:string) {
        // геттер и сеттер не могут быть асинхронные, 
        // проверка пароля делается только в методах
    }
}

const user_56 = new User_56();

user_56.login = 'myLogin';
 

console.log(user_56.login)