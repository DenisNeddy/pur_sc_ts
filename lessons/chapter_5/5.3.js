"use strict";
// Конструктор Класса
//-------------------------------------------------------
// Основные понятия:
// Конструктор класса – специальный метод класса, автоматически вызываемый при создании объекта (инстанса) класса.
// Отличия конструктора от обычных методов:
// Автоматически вызывается при использовании new.
// Всегда возвращает инстанс класса.
// Не поддерживает возвращение других типов данных.
// Работа с конструктором:
// Запрещено изменять возвращаемый тип; всегда возвращает инстанс класса.
// Не поддерживает использование дженериков в качестве параметра.
// Перегрузка конструктора (Overload):
// Overload позволяет определить несколько вариантов создания объекта класса с разными параметрами.
// В TypeScript реализация overload состоит из объявления нескольких сигнатур конструктора и одной реализации, удовлетворяющей всем сигнатурам.
// Пример с Overload:
// Создание пользователя с именем.
// Создание пользователя без имени.
// Добавление возможности создания пользователя с возрастом.
// Аспекты реализации:
// В сигнатуре конструктора параметры могут быть обязательными, необязательными или иметь поддержку нескольких типов (например, string | number).
// На практике лучше избегать сложных overload из-за роста сложности кода и потенциальной путаницы.
// Компиляция в JavaScript:
// При компиляции TypeScript в JavaScript типы игнорируются, но логика проверки типов (если используется) в конструкторе сохраняется.
//-------------------------------------------------------
class User_53 {
    constructor(ageOrName, age) {
        if (typeof ageOrName === 'string') {
            this.name = ageOrName;
        }
        else if (typeof ageOrName === 'number') {
            this.age = ageOrName;
        }
        if (typeof age === 'number') {
            this.age = age;
        }
    }
}
const user_53 = new User_53('Профессор Фортран');
const user_53_1 = new User_53('Профессор Жуль');
const user_53_2 = new User_53(33);
const user_53_3 = new User_53('Терт', 33);
