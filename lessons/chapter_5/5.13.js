"use strict";
// Статические свойства
//----------------------------------------------
// Основная цель модификатора Static:
// Сделать свойства или методы класса статичными.
// Польза Static:
// Обращение к свойствам или методам без создания экземпляра класса.
// Удобство в использовании синглтон подхода и избежание лишнего создания экземпляров.
// Пример:
// Создание статического объекта db в классе UserService, позволяет обращаться к базе данных напрямую через UserService.db без инстанцирования.
// Статические и Нестатические Методы:
// Статические методы доступны без создания экземпляра.
// Нестатические методы требуют создания экземпляра класса для доступа.
// Особенности и Ограничения:
// Модификаторы Доступа: Статические свойства и методы могут иметь различные модификаторы доступа (например, private).
// Использование со Статическими Свойствами: Нестатические методы могут обращаться к статическим свойствам класса.
// Статические Блоки: Используются для инициализации статических свойств класса.
// Асинхронность: Статические методы могут быть асинхронными, но статические блоки не поддерживают асинхронность.
// Почему Не "Статические Классы":
// JavaScript и TypeScript позволяют использовать функции и константы вне классов, что обеспечивает гибкость в определении статических элементов, отличную от языков типа C# и Java.
// Когда Использовать Static:
// Статические свойства и методы полезны для создания утилитарных функций, переменных или когда требуется глобальный доступ к некоторым ресурсам без необходимости их инстанцирования.
// Ограничения на Имена:
// Использование некоторых названий для статических свойств может конфликтовать с зарезервированными именами.
//----------------------------------------------
class UserService_513 {
    static getUser(id) {
        return this.db.findById(id);
    }
    // constructor(id: number) {
    // }
    create() {
        UserService_513.db;
    }
}
(() => {
    UserService_513.db = 'fgldffdg';
})();
UserService_513.db;
const inst = new UserService_513();
inst.create();
