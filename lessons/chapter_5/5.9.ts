// Особенности наследования

//---------------------------------------------------

// Порядок вызова конструкторов и свойств
// Создадим класс User, у которого есть свойство name.
// Создадим класс Admin, наследующий User, со своим свойством name.
// При создании объекта класса Admin, вывод в консоль показывает сначала user, затем admin, что демонстрирует порядок инициализации и вызова конструкторов.
// Сначала инициализируются свойства родительского класса (User), вызывается его конструктор.
// Затем инициализируются свойства дочернего класса (Admin) и вызывается его конструктор.
// Важное правило вызова super в конструкторе
// При наследовании классов, первой инструкцией в конструкторе дочернего класса должен быть вызов super(), если класс содержит инициализированные свойства, параметры, или закрытый идентификатор.
// Нельзя обращаться к this до вызова super, так как это приведет к ошибке.
// Можно выполнять операции, не связанные с this до вызова super.
// Наследование встроенных классов
// Можно наследоваться не только от собственных классов, но и от встроенных классов, например, Error.
// Создание собственного класса ошибки, HTTPError, наследуемого от Error.
// В конструкторе класса можно добавить дополнительные свойства, например, HTTP статус код.
// Возможность конструирования кастомных классов ошибок на базе стандартного класса ошибок, расширяя его дополнительной функциональностью.

//---------------------------------------------------



type PaymentStatus_59 = 'new' | 'paid';

class Payment_59 {
    id: number;
    status: PaymentStatus_59 = 'new';

    constructor(id: number) {
        this.id = id;
    }

    pay() {
        this.status = 'paid';
    }
}

class PersistentPayment_59 extends Payment_59 {
    databaseId: number;
    paidAt: Date;

    constructor() {
        const id = Math.random();
        super(id);
    }

    save() {
        // Сохраняет базу
    }

    override pay(date?: Date) {
        super.pay()
        if(date) {
            this.paidAt = date;
        }
    }
}


class User_59 {
    name: string = 'user';

    constructor() {
        console.log(this.name);
    }
}

class Admin_59 extends User_59 {
    name: string = 'adimin';
}

new Admin_59(); // имя будет user, так как родительский класс инициализируется первым 