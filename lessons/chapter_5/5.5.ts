// Перегрузка методов Класса


//------------------------------------------------------

// Основные понятия:
// Перегрузка (Overloading): Возможность иметь несколько методов или функций с одинаковым именем, но различной сигнатурой (набор и тип параметров).
// Сигнатура: Уникальная комбинация имени метода/функции и её параметров.
// Примеры перегрузки:
// Перегрузка методов класса:
// В классе пользователя можно иметь метод addSkill, принимающий на вход либо одну строку (один скилл), либо массив строк (несколько скиллов), и добавляющий эти скиллы пользователям.
// Реализация перегрузки:
// Создаются два метода addSkill: один принимает строку, другой - массив строк.
// Методы различаются по типу принимаемого аргумента, но выполняют похожую функцию - добавление скиллов.
// Пример с перегрузкой функции:
// Перегрузка обычных функций (помимо методов классов):
// Функция run, которая на вход может принимать как число (distance в числовом выражении), так и строку (расстояние описанное словами).
// В зависимости от типа аргумента, функция может вести себя по-разному и возвращать разные типы данных (например, число или строку).
// Практическая реализация:
// При передаче строки: Если аргумент типа string, push добавляет одиночный скилл.
// При передаче массива: Если аргумент типа массив, concat добавляет несколько скиллов.
// В случае с функцией run, в зависимости от типа входящего аргумента, функция может возвращать разные типы: если number, то возможен один тип возвращаемого значения, если string
// другой.
// Важность перегрузки:
// Улучшает чёткость и гибкость интерфейса API.
// Позволяет методам и функциям быть более выразительными и специфичными в зависимости от контекста использования.
// Ведёт к созданию более читаемого и удобного в использовании кода.

//------------------------------------------------------


class User_55 {
    skills: string[];
    
    addSkill(skill: string): void;
    addSkill(skills: string[]): void;
    addSkill (skillOrSkills: string | string[]): void {
        if(typeof skillOrSkills === 'string') {
            this.skills.push(skillOrSkills);
        } else {
            this.skills.concat(skillOrSkills)
        }
    }
}

// new User_55().addSkill()

// перегрузка функции

function run(distance: number): number;
function run(distance: string): string;
function run(distance: number | string): number | string {
    if(typeof distance === 'string') {
        return ''
    } else {
        return 1;
    }
}