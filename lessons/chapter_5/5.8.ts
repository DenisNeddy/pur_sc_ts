// Extends

//------------------------------------------------

// Имплементация vs Наследование: Имплементация определяет прообраз класса для его реализации, тогда как наследование позволяет создать зависимость между классами, передавая свойства и методы от одного класса другому.
// Аккуратное использование: Наследование может привести к сильной связанности кода, что усложняет его поддержку и модификацию.
// Пример использования наследования:

// Создание класса Payment со свойствами и методом для изменения статуса платежа.
// Расширение класса Payment через наследование (extends), создание класса PersistentPayment для добавления специфических свойств и методов, связанных с сохранением в базу данных.
// Ключевые моменты наследования:

// Возможность расширения существующих классов без дублирования кода.
// Переопределение конструктора и методов в дочернем классе с возможностью добавления новой логики.
// Использование super для вызова конструкторов и методов базового класса в дочернем.
// Override модификатор для четкой индикации переопределения методов, повышение безопасности и предотвращение ошибок при модификации классов.

//------------------------------------------------

type PaymentStatus_58 = 'new' | 'paid';

class Payment_58 {
    id: number;
    status: PaymentStatus_58 = 'new';

    constructor(id: number) {
        this.id = id;
    }

    pay() {
        this.status = 'paid';
    }
}

class PersistentPayment_58 extends Payment_58 {
    databaseId: number;
    paidAt: Date;

    constructor() {
        const id = Math.random();
        super(id);
    }

    save() {
        // Сохраняет базу
    }

    override pay(date?: Date) {
        super.pay()
        if(date) {
            this.paidAt = date;
        }
    }
}

// new Payment_58()
// new PersistentPayment_58().