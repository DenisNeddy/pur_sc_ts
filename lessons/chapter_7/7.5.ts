// Использование в типах 

//-----------------------------------------------------

// Основные понятия:
// Генерики: Позволяют создавать компоненты, работающие с любым типом данных, при этом сохраняя строгую типизацию.
// Примеры использования генериков:
// В функциях:
// Определение: Создаем функцию split с использованием генерика для работы с различными типами данных.
// Генерики в параметрах и возвращаемом значении: функция принимает и возвращает значения, тип которых указывается с помощью генерика.
// В описании типов функций:
// Присваиваем типы функциям (например, getSplitHub), используя генерики для универсальности обработки данных.
// Указание генерика переустанавливает типы входных и выходных данных функции, делая код более гибким.
// В интерфейсах и типах объектов:
// Создание интерфейса iLogLine с использованием генерика для типизации данных, позволяя динамически установить тип данных для конкретного поля.
// Пример LogLine: параметризация типа данных для удобства и безопасности обработки разнообразных данных.

//-----------------------------------------------------


function logMiddleware_75<T>(data: T): T {
    console.log(data);

    return data;
}

const res_75 = logMiddleware_75<number>(10);

function getSplitedHalf_75<T>(data: Array<T>): Array<T> {
    const l = data.length / 2;
    return data.splice(0, l);
}


getSplitedHalf_75<number>([1,3,4]);

const split: <T>(data: Array<T>) => Array<T> = getSplitedHalf_75;
const split2: <G>(data: Array<G>) => Array<G> = getSplitedHalf_75;

interface ILogLine_75<T> {
    timeStamp: Date;
    data: T
}

type LogLineType_75<T> = {
    timeStamp: Date;
    data: T
}

const logLine_75_1: ILogLine_75<{a: number}> = {
    timeStamp: new Date(),
    data: {
        a: 1
    }
}


const logLine_75_2: LogLineType_75<{a: number}> = {
    timeStamp: new Date(),
    data: {
        a: 1
    }
}