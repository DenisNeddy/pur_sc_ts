// Mixins


//--------------------------------------

// Основные моменты:

// Введение в миксины:
// Миксины не так часто используются в TypeScript из-за ограниченности применений и сложности реализации.
// Примеры использования: DCI-model в тестировании, наследование от нескольких классов.
// Сравнение моделей наследования:
// Extents (Расширение): класс может расширять другой класс, наследуя все его свойства.
// Композиция: объединение различных объектов для создания нового.
// Миксины: позволяют наследование свойств от нескольких классов или добавление свойств объекту без явного наследования.
// Реализация миксинов:
// Понятие типа конструктора и создание generic типа конструктора.
// Пример создания класса List и интерфейса ListType для типизации конструктора.
// Пример миксина:
// Создание функции миксина для расширения функционала класса List методом получения первого элемента.
// Сравнение реализации через наследование и через миксин.
// Преимущества миксинов:
// Возможность расширения класса свойствами и методами нескольких классов.
// Пример с классом, комбинирующим свойства классов List и Accordion.
// Когда использовать миксины:
// Подходят для кейсов, требующих смешивание и добавление функциональности элементов из разных областей.
// Рекомендуются для создания сложных объектов из множества мелких элементов.
// Стоит учитывать более высокий порог входа и возможные альтернативы в виде композиции для упрощения решений.


//--------------------------------------